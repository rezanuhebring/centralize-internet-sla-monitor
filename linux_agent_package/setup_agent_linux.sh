#!/bin/bash
# setup_agent_linux.sh - FINAL PRODUCTION VERSION
# Interactive setup for the Linux SLA Monitor Agent.

# --- Configuration Variables ---
MONITOR_SCRIPT_NAME="monitor_internet.sh"
MONITOR_SCRIPT_DIR="/opt/sla_monitor"
MONITOR_SCRIPT_PATH="${MONITOR_SCRIPT_DIR}/${MONITOR_SCRIPT_NAME}"
CONFIG_FILE_PATH="${MONITOR_SCRIPT_DIR}/agent_config.env"
AGENT_LOG_FILE="/var/log/internet_sla_monitor_agent.log"

# --- Helper Functions ---
print_info() { echo -e "\033[0;32m[INFO]\033[0m $1"; }
print_warn() { echo -e "\033[0;33m[WARN]\033[0m $1"; }
print_error() { echo -e "\033[0;31m[ERROR]\033[0m $1" >&2; }
prompt_input() {
    local prompt_text="$1"
    local var_name="$2"
    local default_value="$3"
    local user_input
    if [ -n "$default_value" ]; then
        read -p "$prompt_text [$default_value]: " user_input
        eval "$var_name='${user_input:-$default_value}'"
    else
        while true; do
            read -p "$prompt_text: " user_input
            if [ -n "$user_input" ]; then
                eval "$var_name='$user_input'"
                break
            else
                print_warn "This field cannot be empty."
            fi
        done
    fi
}

# --- Main Setup Logic ---
print_info "Starting Interactive SLA Monitor AGENT Setup (Linux)..."
if [ "$(id -u)" -ne 0 ]; then print_error "This script must be run with sudo: sudo $0"; exit 1; fi

# 1. Check for source files
if [ ! -f "./${MONITOR_SCRIPT_NAME}" ]; then
    print_error "Source monitor script '${MONITOR_SCRIPT_NAME}' not found in current directory."
    exit 1
fi

# 2. Gather User Configuration
print_info "Please provide the agent's configuration details."
prompt_input "Enter the Central API URL (e.g., http://192.168.1.10/api/submit_metrics.php)" "CENTRAL_API_URL"
prompt_input "Enter a Unique Agent Identifier for this machine" "AGENT_IDENTIFIER"
prompt_input "Enter the Agent Type" "AGENT_TYPE" "Client"
prompt_input "Enter the Central API Key (optional, press Enter to skip)" "CENTRAL_API_KEY" ""
while true; do
    prompt_input "Enter the monitoring frequency in minutes (1-59)" "MONITOR_FREQUENCY" "15"
    if [[ "$MONITOR_FREQUENCY" =~ ^[1-9]$|^[1-5][0-9]$ ]]; then
        break
    else
        print_warn "Please enter a valid number between 1 and 59."
    fi
done

# 3. Install Dependencies
print_info "Updating package list and installing dependencies..."
sudo apt-get update -y || { print_error "Apt update failed."; exit 1; }
sudo apt-get install -y curl jq bc iputils-ping dnsutils || { print_error "Core dependency installation failed."; exit 1; }

# Install Speedtest CLI with fallback
if ! command -v speedtest &> /dev/null && ! command -v speedtest-cli &> /dev/null; then
    if curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash; then
        sudo apt-get install -y speedtest || { print_warn "Failed to install Ookla 'speedtest'. Trying community version..."; sudo apt-get install -y speedtest-cli || print_warn "No speedtest CLI could be installed."; }
    else
        print_warn "Could not add Ookla repo. Trying community version...";
        sudo apt-get install -y speedtest-cli || print_warn "No speedtest CLI could be installed."
    fi
else
    print_info "A speedtest command is already installed."
fi

# Accept license terms
print_info "Attempting to accept Speedtest license terms..."
if command -v speedtest &> /dev/null; then sudo speedtest --accept-license --accept-gdpr > /dev/null 2>&1; fi
if command -v speedtest-cli &> /dev/null; then sudo speedtest-cli --accept-license --accept-gdpr > /dev/null 2>&1; fi

# Fix ping permissions
print_info "Ensuring 'ping' has necessary permissions for non-interactive execution..."
if command -v ping &> /dev/null; then
    sudo chmod u+s $(which ping)
fi

# 4. Deploy Application Files
print_info "Creating script directory: ${MONITOR_SCRIPT_DIR}"
sudo mkdir -p "${MONITOR_SCRIPT_DIR}"

print_info "Generating agent configuration file at ${CONFIG_FILE_PATH}"
sudo tee "${CONFIG_FILE_PATH}" > /dev/null <<EOF
# SLA Monitor Agent Configuration - Generated by setup script
AGENT_IDENTIFIER="${AGENT_IDENTIFIER}"
CENTRAL_API_URL="${CENTRAL_API_URL}"
AGENT_TYPE="${AGENT_TYPE}"
CENTRAL_API_KEY="${CENTRAL_API_KEY}"

# Default Test Flags (can be overridden by central profile)
ENABLE_PING=true
ENABLE_DNS=true
ENABLE_HTTP=true
ENABLE_SPEEDTEST=true

# Default Test Parameters
PING_HOSTS=("8.8.8.8" "8.8.4.4" "1.1.1.1")
PING_COUNT=10
DNS_CHECK_HOST="www.google.com"
HTTP_CHECK_URL="https://www.google.com"
EOF
sudo chown root:root "${CONFIG_FILE_PATH}" && sudo chmod 600 "${CONFIG_FILE_PATH}"

print_info "Copying agent monitoring script to ${MONITOR_SCRIPT_PATH}"
sudo cp "./${MONITOR_SCRIPT_NAME}" "${MONITOR_SCRIPT_PATH}"
sudo chmod +x "${MONITOR_SCRIPT_PATH}" && sudo chown root:root "${MONITOR_SCRIPT_PATH}"

# 5. Set up Logging and Cron Job
print_info "Setting up log file and cron job..."
sudo touch "${AGENT_LOG_FILE}"
sudo chown syslog:adm "${AGENT_LOG_FILE}" && sudo chmod 640 "${AGENT_LOG_FILE}"

CRON_FILE_NAME="sla-monitor-agent-cron"
CRON_FILE_DEST="/etc/cron.d/${CRON_FILE_NAME}"
print_info "Creating cron job to run every ${MONITOR_FREQUENCY} minutes."

sudo tee "${CRON_FILE_DEST}" > /dev/null <<EOF
# SLA Monitor AGENT Cron Job
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Run the monitor script every ${MONITOR_FREQUENCY} minutes.
*/${MONITOR_FREQUENCY} * * * * root ${MONITOR_SCRIPT_PATH} >> ${AGENT_LOG_FILE} 2>&1
EOF

sudo chown root:root "${CRON_FILE_DEST}" && sudo chmod 644 "${CRON_FILE_DEST}"
print_info "Agent cron job created successfully."

print_info "--------------------------------------------------------------------"
print_info "SLA Monitor AGENT Setup finished."
print_info "You can test the agent by running: sudo ${MONITOR_SCRIPT_PATH}"
print_info "Check the log file for output: tail -f ${AGENT_LOG_FILE}"
print_info "--------------------------------------------------------------------"
